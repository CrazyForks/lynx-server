//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4
use async_trait::async_trait;
use chrono::Local;
use sea_orm::{entity::prelude::*, ActiveValue};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
#[sea_orm(table_name = "rule_content")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub content: Json,
    pub rule_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::rule::Entity",
        from = "Column::RuleId",
        to = "super::rule::Column::Id"
    )]
    Rule,
}

impl Related<super::rule::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rule.def()
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {}
