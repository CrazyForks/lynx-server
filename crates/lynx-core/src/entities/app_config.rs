//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use schemars::JsonSchema;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::server_context::DB;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
#[sea_orm(table_name = "app_config")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub capture_https: bool,
    pub recording_status: RecordingStatus,
}

#[derive(
    EnumIter, DeriveActiveEnum, Clone, Debug, PartialEq, Eq, Serialize, Deserialize, JsonSchema,
)]
#[sea_orm(
    rs_type = "String",
    db_type = "String(StringLen::None)",
    rename_all = "camelCase"
)]
pub enum RecordingStatus {
    StartRecording,
    PauseRecording,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

pub async fn get_app_config() -> Model {
    Entity::find()
        .one(DB.get().unwrap())
        .await
        .expect("app config not found")
        .expect("app config not found")
}
