/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as NetworkIndexImport } from './routes/network/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as CertificatesIndexImport } from './routes/certificates/index'
import { Route as SettingsSslProxyImport } from './routes/settings/ssl-proxy'
import { Route as SettingsGeneralImport } from './routes/settings/general'
import { Route as SettingsCertificatesImport } from './routes/settings/certificates'
import { Route as RuleManagerDisableImport } from './routes/ruleManager/disable'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRoute,
} as any)

const NetworkIndexRoute = NetworkIndexImport.update({
  id: '/network/',
  path: '/network/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any)

const CertificatesIndexRoute = CertificatesIndexImport.update({
  id: '/certificates/',
  path: '/certificates/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSslProxyRoute = SettingsSslProxyImport.update({
  id: '/ssl-proxy',
  path: '/ssl-proxy',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsGeneralRoute = SettingsGeneralImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsCertificatesRoute = SettingsCertificatesImport.update({
  id: '/certificates',
  path: '/certificates',
  getParentRoute: () => SettingsRoute,
} as any)

const RuleManagerDisableRoute = RuleManagerDisableImport.update({
  id: '/ruleManager/disable',
  path: '/ruleManager/disable',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/ruleManager/disable': {
      id: '/ruleManager/disable'
      path: '/ruleManager/disable'
      fullPath: '/ruleManager/disable'
      preLoaderRoute: typeof RuleManagerDisableImport
      parentRoute: typeof rootRoute
    }
    '/settings/certificates': {
      id: '/settings/certificates'
      path: '/certificates'
      fullPath: '/settings/certificates'
      preLoaderRoute: typeof SettingsCertificatesImport
      parentRoute: typeof SettingsImport
    }
    '/settings/general': {
      id: '/settings/general'
      path: '/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralImport
      parentRoute: typeof SettingsImport
    }
    '/settings/ssl-proxy': {
      id: '/settings/ssl-proxy'
      path: '/ssl-proxy'
      fullPath: '/settings/ssl-proxy'
      preLoaderRoute: typeof SettingsSslProxyImport
      parentRoute: typeof SettingsImport
    }
    '/certificates/': {
      id: '/certificates/'
      path: '/certificates'
      fullPath: '/certificates'
      preLoaderRoute: typeof CertificatesIndexImport
      parentRoute: typeof rootRoute
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof rootRoute
    }
    '/network/': {
      id: '/network/'
      path: '/network'
      fullPath: '/network'
      preLoaderRoute: typeof NetworkIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof SettingsImport
    }
  }
}

// Create and export the route tree

interface SettingsRouteChildren {
  SettingsCertificatesRoute: typeof SettingsCertificatesRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
  SettingsSslProxyRoute: typeof SettingsSslProxyRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsCertificatesRoute: SettingsCertificatesRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
  SettingsSslProxyRoute: SettingsSslProxyRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/settings': typeof SettingsRouteWithChildren
  '/ruleManager/disable': typeof RuleManagerDisableRoute
  '/settings/certificates': typeof SettingsCertificatesRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/ssl-proxy': typeof SettingsSslProxyRoute
  '/certificates': typeof CertificatesIndexRoute
  '/home': typeof HomeIndexRoute
  '/network': typeof NetworkIndexRoute
  '/settings/': typeof SettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/ruleManager/disable': typeof RuleManagerDisableRoute
  '/settings/certificates': typeof SettingsCertificatesRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/ssl-proxy': typeof SettingsSslProxyRoute
  '/certificates': typeof CertificatesIndexRoute
  '/home': typeof HomeIndexRoute
  '/network': typeof NetworkIndexRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/settings': typeof SettingsRouteWithChildren
  '/ruleManager/disable': typeof RuleManagerDisableRoute
  '/settings/certificates': typeof SettingsCertificatesRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/ssl-proxy': typeof SettingsSslProxyRoute
  '/certificates/': typeof CertificatesIndexRoute
  '/home/': typeof HomeIndexRoute
  '/network/': typeof NetworkIndexRoute
  '/settings/': typeof SettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/settings'
    | '/ruleManager/disable'
    | '/settings/certificates'
    | '/settings/general'
    | '/settings/ssl-proxy'
    | '/certificates'
    | '/home'
    | '/network'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/ruleManager/disable'
    | '/settings/certificates'
    | '/settings/general'
    | '/settings/ssl-proxy'
    | '/certificates'
    | '/home'
    | '/network'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/settings'
    | '/ruleManager/disable'
    | '/settings/certificates'
    | '/settings/general'
    | '/settings/ssl-proxy'
    | '/certificates/'
    | '/home/'
    | '/network/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  RuleManagerDisableRoute: typeof RuleManagerDisableRoute
  CertificatesIndexRoute: typeof CertificatesIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  NetworkIndexRoute: typeof NetworkIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  SettingsRoute: SettingsRouteWithChildren,
  RuleManagerDisableRoute: RuleManagerDisableRoute,
  CertificatesIndexRoute: CertificatesIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  NetworkIndexRoute: NetworkIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/settings",
        "/ruleManager/disable",
        "/certificates/",
        "/home/",
        "/network/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx",
      "children": [
        "/settings/certificates",
        "/settings/general",
        "/settings/ssl-proxy",
        "/settings/"
      ]
    },
    "/ruleManager/disable": {
      "filePath": "ruleManager/disable.tsx"
    },
    "/settings/certificates": {
      "filePath": "settings/certificates.tsx",
      "parent": "/settings"
    },
    "/settings/general": {
      "filePath": "settings/general.tsx",
      "parent": "/settings"
    },
    "/settings/ssl-proxy": {
      "filePath": "settings/ssl-proxy.tsx",
      "parent": "/settings"
    },
    "/certificates/": {
      "filePath": "certificates/index.tsx"
    },
    "/home/": {
      "filePath": "home/index.tsx"
    },
    "/network/": {
      "filePath": "network/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
