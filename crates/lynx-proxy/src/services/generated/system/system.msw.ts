/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import { ResponseCode } from '../utoipaAxum.schemas';
import type { ResponseDataWrapperBaseInfo } from '../utoipaAxum.schemas';

export const getGetBaseInfoResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperBaseInfo> = {},
): ResponseDataWrapperBaseInfo => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    accessAddrList: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha(20)),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetBaseInfoMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperBaseInfo
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ResponseDataWrapperBaseInfo> | ResponseDataWrapperBaseInfo),
) => {
  return http.get('*/base_info/base_info', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetBaseInfoResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getSystemMock = () => [getGetBaseInfoMockHandler()];
