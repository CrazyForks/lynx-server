/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
export interface BaseInfo {
  accessAddrList: string[];
}

export type CaptureConditionOneOfAllOfType =
  (typeof CaptureConditionOneOfAllOfType)[keyof typeof CaptureConditionOneOfAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaptureConditionOneOfAllOfType = {
  simple: 'simple',
} as const;

export type CaptureConditionOneOfAllOf = {
  type: CaptureConditionOneOfAllOfType;
};

export type CaptureConditionOneOf = SimpleCaptureCondition &
  CaptureConditionOneOfAllOf;

export type CaptureConditionOneOfFourAllOfType =
  (typeof CaptureConditionOneOfFourAllOfType)[keyof typeof CaptureConditionOneOfFourAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaptureConditionOneOfFourAllOfType = {
  complex: 'complex',
} as const;

export type CaptureConditionOneOfFourAllOf = {
  type: CaptureConditionOneOfFourAllOfType;
};

export type CaptureConditionOneOfFour = ComplexCaptureRule &
  CaptureConditionOneOfFourAllOf;

/**
 * ÊçïËé∑Êù°‰ª∂ÔºàÁÆÄÂçïÊàñÂ§çÊùÇÔºâ
 */
export type CaptureCondition =
  | CaptureConditionOneOf
  | CaptureConditionOneOfFour;

export interface CaptureFilter {
  enabled: boolean;
  excludeDomains: DomainFilter[];
  includeDomains: DomainFilter[];
}

export type CaptureRuleId = number | null;

/**
 * ÂÆåÊï¥ÁöÑÊçïËé∑ËßÑÂàô
 */
export interface CaptureRule {
  condition: CaptureCondition;
  id?: CaptureRuleId;
}

export interface CaptureSwitch {
  recordingStatus: RecordingStatus;
}

/**
 * Capture type enumeration
 */
export type CaptureType = (typeof CaptureType)[keyof typeof CaptureType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaptureType = {
  glob: 'glob',
  regex: 'regex',
  exact: 'exact',
  contains: 'contains',
} as const;

/**
 * Â§çÊùÇÊçïËé∑ËßÑÂàôÔºàÊîØÊåÅÂµåÂ•óÈÄªËæëÔºâ
 */
export interface ComplexCaptureRule {
  /** Â≠êÊù°‰ª∂ÂàóË°® */
  conditions: CaptureCondition[];
  /** ÈÄªËæëÊìç‰ΩúÁ¨¶ */
  operator: LogicalOperator;
}

export interface DomainFilter {
  domain: string;
  enabled: boolean;
  /**
   * @minimum 0
   * @maximum 65535
   */
  port: number;
}

export type EmptyOkResponse = ResponseDataWrapperTupleUnit;

export interface ErrorResponse {
  /** @minimum 0 */
  code: number;
  message: string;
}

export type GetRequestsDataTraceIds = string[] | null;

export interface GetRequestsData {
  traceIds?: GetRequestsDataTraceIds;
}

export type HandlerRuleDescription = string | null;

export type HandlerRuleId = number | null;

/**
 * Handler rule configuration
 */
export interface HandlerRule {
  config: Value;
  description?: HandlerRuleDescription;
  enabled: boolean;
  executionOrder: number;
  handlerType: HandlerType;
  id?: HandlerRuleId;
  name: string;
}

/**
 * Handler type enumeration
 */
export type HandlerType = (typeof HandlerType)[keyof typeof HandlerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HandlerType = {
  block: 'block',
  modifyRequest: 'modifyRequest',
  localFile: 'localFile',
  modifyResponse: 'modifyResponse',
  proxyForward: 'proxyForward',
} as const;

/**
 * ÈÄªËæëÊìç‰ΩúÁ¨¶
 */
export type LogicalOperator =
  (typeof LogicalOperator)[keyof typeof LogicalOperator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LogicalOperator = {
  and: 'and',
  or: 'or',
  not: 'not',
} as const;

export type MessageEventBody = string;

export type MessageEventRequestHeaders = { [key: string]: string };

export interface MessageEventRequest {
  body: MessageEventBody;
  headerSize: MessageHeaderSize;
  headers: MessageEventRequestHeaders;
  method: string;
  url: string;
  version: string;
}

export type MessageEventResponseHeaders = { [key: string]: string };

export interface MessageEventResponse {
  body: MessageEventBody;
  headerSize: MessageHeaderSize;
  headers: MessageEventResponseHeaders;
  /** @minimum 0 */
  status: number;
  version: string;
}

export type MessageEventStatusOneOf = {
  Error: string;
};

export type MessageEventStatus =
  | 'Initial'
  | 'RequestStarted'
  | 'Completed'
  | MessageEventStatusOneOf
  | 'Cancelled';

export type MessageEventStoreValueMessages = null | MessageEventWebSocket;

export type MessageEventStoreValueRequest = null | MessageEventRequest;

export type MessageEventStoreValueResponse = null | MessageEventResponse;

export type MessageEventStoreValueTunnel = null | MessageEventTunnel;

export interface MessageEventStoreValue {
  isNew: boolean;
  messages?: MessageEventStoreValueMessages;
  request?: MessageEventStoreValueRequest;
  response?: MessageEventStoreValueResponse;
  status: MessageEventStatus;
  timings: MessageEventTimings;
  traceId: string;
  tunnel?: MessageEventStoreValueTunnel;
}

/**
 * @minimum 0
 */
export type MessageEventTimingsProxyEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsProxyStart = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsReponseBodyEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsReponseBodyStart = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsRequestBodyEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsRequestBodyStart = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsRequestEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsRequestStart = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsTunnelEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsTunnelStart = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsWebsocketEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsWebsocketStart = number | null;

export interface MessageEventTimings {
  /** @minimum 0 */
  proxyEnd?: MessageEventTimingsProxyEnd;
  /** @minimum 0 */
  proxyStart?: MessageEventTimingsProxyStart;
  /** @minimum 0 */
  reponseBodyEnd?: MessageEventTimingsReponseBodyEnd;
  /** @minimum 0 */
  reponseBodyStart?: MessageEventTimingsReponseBodyStart;
  /** @minimum 0 */
  requestBodyEnd?: MessageEventTimingsRequestBodyEnd;
  /** @minimum 0 */
  requestBodyStart?: MessageEventTimingsRequestBodyStart;
  /** @minimum 0 */
  requestEnd?: MessageEventTimingsRequestEnd;
  /** @minimum 0 */
  requestStart?: MessageEventTimingsRequestStart;
  /** @minimum 0 */
  tunnelEnd?: MessageEventTimingsTunnelEnd;
  /** @minimum 0 */
  tunnelStart?: MessageEventTimingsTunnelStart;
  /** @minimum 0 */
  websocketEnd?: MessageEventTimingsWebsocketEnd;
  /** @minimum 0 */
  websocketStart?: MessageEventTimingsWebsocketStart;
}

export interface MessageEventTunnel {
  status: TunnelStatus;
}

export interface MessageEventWebSocket {
  message: WebSocketLog[];
  status: WebSocketStatus;
}

/**
 * @minimum 0
 */
export type MessageHeaderSize = number;

export type RecordRequestsPatchRequests = MessageEventStoreValue[] | null;

export interface RecordRequests {
  newRequests: MessageEventStoreValue[];
  patchRequests?: RecordRequestsPatchRequests;
}

export type RecordingStatus =
  (typeof RecordingStatus)[keyof typeof RecordingStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordingStatus = {
  startRecording: 'startRecording',
  pauseRecording: 'pauseRecording',
} as const;

export type RequestRuleDescription = string | null;

export type RequestRuleId = number | null;

/**
 * ËØ∑Ê±ÇÂ§ÑÁêÜËßÑÂàô
 */
export interface RequestRule {
  capture: CaptureRule;
  description?: RequestRuleDescription;
  enabled: boolean;
  handlers: HandlerRule[];
  id?: RequestRuleId;
  name: string;
  priority: number;
}

export type ResponseCode = (typeof ResponseCode)[keyof typeof ResponseCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResponseCode = {
  ok: 'ok',
  validateError: 'validateError',
} as const;

export type ResponseDataWrapperBaseInfoData = {
  accessAddrList: string[];
};

export type ResponseDataWrapperBaseInfoMessage = string | null;

export interface ResponseDataWrapperBaseInfo {
  code: ResponseCode;
  data: ResponseDataWrapperBaseInfoData;
  message?: ResponseDataWrapperBaseInfoMessage;
}

export type ResponseDataWrapperCaptureFilterData = {
  enabled: boolean;
  excludeDomains: DomainFilter[];
  includeDomains: DomainFilter[];
};

export type ResponseDataWrapperCaptureFilterMessage = string | null;

export interface ResponseDataWrapperCaptureFilter {
  code: ResponseCode;
  data: ResponseDataWrapperCaptureFilterData;
  message?: ResponseDataWrapperCaptureFilterMessage;
}

export type ResponseDataWrapperCaptureSwitchData = {
  recordingStatus: RecordingStatus;
};

export type ResponseDataWrapperCaptureSwitchMessage = string | null;

export interface ResponseDataWrapperCaptureSwitch {
  code: ResponseCode;
  data: ResponseDataWrapperCaptureSwitchData;
  message?: ResponseDataWrapperCaptureSwitchMessage;
}

export type ResponseDataWrapperRecordRequestsDataPatchRequests =
  | MessageEventStoreValue[]
  | null;

export type ResponseDataWrapperRecordRequestsData = {
  newRequests: MessageEventStoreValue[];
  patchRequests?: ResponseDataWrapperRecordRequestsDataPatchRequests;
};

export type ResponseDataWrapperRecordRequestsMessage = string | null;

export interface ResponseDataWrapperRecordRequests {
  code: ResponseCode;
  data: ResponseDataWrapperRecordRequestsData;
  message?: ResponseDataWrapperRecordRequestsMessage;
}

export type ResponseDataWrapperRequestRuleDataDescription = string | null;

export type ResponseDataWrapperRequestRuleDataId = number | null;

/**
 * ËØ∑Ê±ÇÂ§ÑÁêÜËßÑÂàô
 */
export type ResponseDataWrapperRequestRuleData = {
  capture: CaptureRule;
  description?: ResponseDataWrapperRequestRuleDataDescription;
  enabled: boolean;
  handlers: HandlerRule[];
  id?: ResponseDataWrapperRequestRuleDataId;
  name: string;
  priority: number;
};

export type ResponseDataWrapperRequestRuleMessage = string | null;

export interface ResponseDataWrapperRequestRule {
  code: ResponseCode;
  /** ËØ∑Ê±ÇÂ§ÑÁêÜËßÑÂàô */
  data: ResponseDataWrapperRequestRuleData;
  message?: ResponseDataWrapperRequestRuleMessage;
}

export type ResponseDataWrapperRuleListResponseData = {
  /** @minimum 0 */
  page: number;
  /** @minimum 0 */
  pageSize: number;
  rules: SimpleRuleInfo[];
  /** @minimum 0 */
  total: number;
};

export type ResponseDataWrapperRuleListResponseMessage = string | null;

export interface ResponseDataWrapperRuleListResponse {
  code: ResponseCode;
  data: ResponseDataWrapperRuleListResponseData;
  message?: ResponseDataWrapperRuleListResponseMessage;
}

export type ResponseDataWrapperStringMessage = string | null;

export interface ResponseDataWrapperString {
  code: ResponseCode;
  data: string;
  message?: ResponseDataWrapperStringMessage;
}

export type ResponseDataWrapperTemplateHandlersResponseData = {
  handlers: HandlerRule[];
};

export type ResponseDataWrapperTemplateHandlersResponseMessage = string | null;

export interface ResponseDataWrapperTemplateHandlersResponse {
  code: ResponseCode;
  data: ResponseDataWrapperTemplateHandlersResponseData;
  message?: ResponseDataWrapperTemplateHandlersResponseMessage;
}

export type ResponseDataWrapperTupleUnitMessage = string | null;

export interface ResponseDataWrapperTupleUnit {
  code: ResponseCode;
  data: unknown;
  message?: ResponseDataWrapperTupleUnitMessage;
}

export interface RuleListResponse {
  /** @minimum 0 */
  page: number;
  /** @minimum 0 */
  pageSize: number;
  rules: SimpleRuleInfo[];
  /** @minimum 0 */
  total: number;
}

/**
 * ‰∏ªÊú∫ËøáÊª§
 */
export type SimpleCaptureConditionHost = string | null;

/**
 * HTTPÊñπÊ≥ïËøáÊª§
 */
export type SimpleCaptureConditionMethod = string | null;

/**
 * ÁÆÄÂçïÊçïËé∑Êù°‰ª∂
 */
export interface SimpleCaptureCondition {
  /** ÊçïËé∑Á±ªÂûãÔºàÁõÆÂâçÂè™ÊîØÊåÅGlobÔºâ */
  captureType: CaptureType;
  /** È¢ùÂ§ñÈÖçÁΩÆ */
  config: Value;
  /** ‰∏ªÊú∫ËøáÊª§ */
  host?: SimpleCaptureConditionHost;
  /** HTTPÊñπÊ≥ïËøáÊª§ */
  method?: SimpleCaptureConditionMethod;
  /** ÂåπÈÖçÊ®°ÂºèÔºàGlobÊ†ºÂºèÔºâ */
  pattern: string;
}

export type SimpleRuleInfoDescription = string | null;

export type SimpleRuleInfoId = number | null;

export interface SimpleRuleInfo {
  description?: SimpleRuleInfoDescription;
  enabled: boolean;
  id?: SimpleRuleInfoId;
  name: string;
  priority: number;
}

export interface TemplateHandlersResponse {
  handlers: HandlerRule[];
}

export interface ToggleRuleRequest {
  enabled: boolean;
}

export type TunnelStatus = (typeof TunnelStatus)[keyof typeof TunnelStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TunnelStatus = {
  Connected: 'Connected',
  Disconnected: 'Disconnected',
} as const;

export interface TupleUnit {}

export interface Value {}

export type WebSocketDirection =
  (typeof WebSocketDirection)[keyof typeof WebSocketDirection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WebSocketDirection = {
  ClientToServer: 'ClientToServer',
  ServerToClient: 'ServerToClient',
} as const;

export interface WebSocketLog {
  direction: WebSocketDirection;
  message: WebSocketMessage;
  /** @minimum 0 */
  timestamp: number;
}

export type WebSocketMessageOneOfText = null | MessageEventBody;

export type WebSocketMessageOneOf = {
  text: WebSocketMessageOneOfText;
};

export type WebSocketMessageOneOfThreeBinary = null | MessageEventBody;

export type WebSocketMessageOneOfThree = {
  binary: WebSocketMessageOneOfThreeBinary;
};

export type WebSocketMessageOneOfFivePing = null | MessageEventBody;

export type WebSocketMessageOneOfFive = {
  ping: WebSocketMessageOneOfFivePing;
};

export type WebSocketMessageOneOfSevenPong = null | MessageEventBody;

export type WebSocketMessageOneOfSeven = {
  pong: WebSocketMessageOneOfSevenPong;
};

export type WebSocketMessageOneOfNineClose = [number, string] | null;

export type WebSocketMessageOneOfNine = {
  close: WebSocketMessageOneOfNineClose;
};

export type WebSocketMessage =
  | WebSocketMessageOneOf
  | WebSocketMessageOneOfThree
  | WebSocketMessageOneOfFive
  | WebSocketMessageOneOfSeven
  | WebSocketMessageOneOfNine;

export type WebSocketStatusOneOf = {
  Error: string;
};

export type WebSocketStatus =
  | 'Start'
  | 'Connected'
  | 'Disconnected'
  | WebSocketStatusOneOf;

export type ListRulesParams = {
  /**
   * È°µÁ†ÅÔºå‰ªé1ÂºÄÂßã
   */
  page?: number | null;
  /**
   * ÊØèÈ°µÊï∞ÈáèÔºåÈªòËÆ§20
   */
  pageSize?: number | null;
  /**
   * ÊòØÂê¶Âè™Ëé∑ÂèñÂêØÁî®ÁöÑËßÑÂàô
   */
  enabledOnly?: boolean | null;
};
