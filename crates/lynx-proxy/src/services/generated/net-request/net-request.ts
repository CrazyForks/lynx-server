/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  GetCachedRequestsParams,
  ResponseDataWrapperCaptureSwitch,
  ResponseDataWrapperRecordRequests,
  ResponseDataWrapperTupleUnit,
} from '../utoipaAxum.schemas';

import { customInstance } from '../../customInstance';

export const getCaptureStatus = (signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperCaptureSwitch>({
    url: `/net_request/capture/status`,
    method: 'GET',
    signal,
  });
};

export const getGetCaptureStatusQueryKey = () => {
  return [`/net_request/capture/status`] as const;
};

export const getGetCaptureStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getCaptureStatus>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCaptureStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCaptureStatus>>
  > = ({ signal }) => getCaptureStatus(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCaptureStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCaptureStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCaptureStatus>>
>;
export type GetCaptureStatusQueryError = void;

export function useGetCaptureStatus<
  TData = Awaited<ReturnType<typeof getCaptureStatus>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCaptureStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCaptureStatus>>,
          TError,
          Awaited<ReturnType<typeof getCaptureStatus>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCaptureStatus<
  TData = Awaited<ReturnType<typeof getCaptureStatus>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCaptureStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCaptureStatus>>,
          TError,
          Awaited<ReturnType<typeof getCaptureStatus>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCaptureStatus<
  TData = Awaited<ReturnType<typeof getCaptureStatus>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCaptureStatus>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCaptureStatus<
  TData = Awaited<ReturnType<typeof getCaptureStatus>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCaptureStatus>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCaptureStatusQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const toggleCapture = (signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/net_request/capture/toggle`,
    method: 'POST',
    signal,
  });
};

export const getToggleCaptureMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toggleCapture>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toggleCapture>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['toggleCapture'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toggleCapture>>,
    void
  > = () => {
    return toggleCapture();
  };

  return { mutationFn, ...mutationOptions };
};

export type ToggleCaptureMutationResult = NonNullable<
  Awaited<ReturnType<typeof toggleCapture>>
>;

export type ToggleCaptureMutationError = void;

export const useToggleCapture = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toggleCapture>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toggleCapture>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getToggleCaptureMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getCachedRequests = (
  params?: GetCachedRequestsParams,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperRecordRequests>({
    url: `/net_request/requests`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetCachedRequestsQueryKey = (
  params?: GetCachedRequestsParams,
) => {
  return [`/net_request/requests`, ...(params ? [params] : [])] as const;
};

export const getGetCachedRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCachedRequests>>,
  TError = void,
>(
  params?: GetCachedRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCachedRequests>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCachedRequestsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCachedRequests>>
  > = ({ signal }) => getCachedRequests(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCachedRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCachedRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCachedRequests>>
>;
export type GetCachedRequestsQueryError = void;

export function useGetCachedRequests<
  TData = Awaited<ReturnType<typeof getCachedRequests>>,
  TError = void,
>(
  params: undefined | GetCachedRequestsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCachedRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCachedRequests>>,
          TError,
          Awaited<ReturnType<typeof getCachedRequests>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCachedRequests<
  TData = Awaited<ReturnType<typeof getCachedRequests>>,
  TError = void,
>(
  params?: GetCachedRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCachedRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCachedRequests>>,
          TError,
          Awaited<ReturnType<typeof getCachedRequests>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCachedRequests<
  TData = Awaited<ReturnType<typeof getCachedRequests>>,
  TError = void,
>(
  params?: GetCachedRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCachedRequests>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCachedRequests<
  TData = Awaited<ReturnType<typeof getCachedRequests>>,
  TError = void,
>(
  params?: GetCachedRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCachedRequests>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCachedRequestsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
