/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import {
  RecordingStatus,
  ResponseCode,
  WebSocketDirection,
  WebSocketStatus,
} from '../utoipaAxum.schemas';
import type {
  MessageEventRequest,
  MessageEventResponse,
  MessageEventWebSocket,
  ResponseDataWrapperCaptureSwitch,
  ResponseDataWrapperRecordRequests,
  ResponseDataWrapperTupleUnit,
} from '../utoipaAxum.schemas';

export const getGetCaptureStatusResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperCaptureSwitch> = {},
): ResponseDataWrapperCaptureSwitch => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    recordingStatus: faker.helpers.arrayElement(Object.values(RecordingStatus)),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getToggleCaptureResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetCachedRequestsResponseMessageEventWebSocketMock = (
  overrideResponse: Partial<MessageEventWebSocket> = {},
): MessageEventWebSocket => ({
  ...{
    message: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      direction: faker.helpers.arrayElement(Object.values(WebSocketDirection)),
      message: faker.helpers.arrayElement([
        { text: faker.helpers.arrayElement([null, faker.string.alpha(20)]) },
        { binary: faker.helpers.arrayElement([null, faker.string.alpha(20)]) },
        { ping: faker.helpers.arrayElement([null, faker.string.alpha(20)]) },
        { pong: faker.helpers.arrayElement([null, faker.string.alpha(20)]) },
        { close: faker.helpers.arrayElement([[], null]) },
      ]),
      timestamp: faker.number.int({ min: 0, max: undefined }),
    })),
    status: faker.helpers.arrayElement(Object.values(WebSocketStatus)),
  },
  ...overrideResponse,
});

export const getGetCachedRequestsResponseMessageEventRequestMock = (
  overrideResponse: Partial<MessageEventRequest> = {},
): MessageEventRequest => ({
  ...{
    body: faker.string.alpha(20),
    headerSize: faker.number.int({ min: 0, max: undefined }),
    headers: {
      [faker.string.alphanumeric(5)]: faker.string.alpha(20),
    },
    method: faker.string.alpha(20),
    url: faker.string.alpha(20),
    version: faker.string.alpha(20),
  },
  ...overrideResponse,
});

export const getGetCachedRequestsResponseMessageEventResponseMock = (
  overrideResponse: Partial<MessageEventResponse> = {},
): MessageEventResponse => ({
  ...{
    body: faker.string.alpha(20),
    headerSize: faker.number.int({ min: 0, max: undefined }),
    headers: {
      [faker.string.alphanumeric(5)]: faker.string.alpha(20),
    },
    status: faker.number.int({ min: 0, max: undefined }),
    version: faker.string.alpha(20),
  },
  ...overrideResponse,
});

export const getGetCachedRequestsResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperRecordRequests> = {},
): ResponseDataWrapperRecordRequests => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    newRequests: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      isNew: faker.datatype.boolean(),
      messages: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          null,
          { ...getGetCachedRequestsResponseMessageEventWebSocketMock() },
        ]),
        undefined,
      ]),
      request: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          null,
          { ...getGetCachedRequestsResponseMessageEventRequestMock() },
        ]),
        undefined,
      ]),
      response: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          null,
          { ...getGetCachedRequestsResponseMessageEventResponseMock() },
        ]),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['Initial'] as const),
        faker.helpers.arrayElement(['RequestStarted'] as const),
        faker.helpers.arrayElement(['Completed'] as const),
        { Error: faker.string.alpha(20) },
        faker.helpers.arrayElement(['Cancelled'] as const),
      ]),
      timings: {
        proxyEnd: faker.helpers.arrayElement([
          faker.number.int({ min: 0, max: undefined }),
          undefined,
        ]),
        proxyStart: faker.helpers.arrayElement([
          faker.number.int({ min: 0, max: undefined }),
          undefined,
        ]),
        reponseBodyEnd: faker.helpers.arrayElement([
          faker.number.int({ min: 0, max: undefined }),
          undefined,
        ]),
        reponseBodyStart: faker.helpers.arrayElement([
          faker.number.int({ min: 0, max: undefined }),
          undefined,
        ]),
        requestBodyEnd: faker.helpers.arrayElement([
          faker.number.int({ min: 0, max: undefined }),
          undefined,
        ]),
        requestBodyStart: faker.helpers.arrayElement([
          faker.number.int({ min: 0, max: undefined }),
          undefined,
        ]),
        requestEnd: faker.helpers.arrayElement([
          faker.number.int({ min: 0, max: undefined }),
          undefined,
        ]),
        requestStart: faker.helpers.arrayElement([
          faker.number.int({ min: 0, max: undefined }),
          undefined,
        ]),
      },
      traceId: faker.string.alpha(20),
    })),
    patchRequests: faker.helpers.arrayElement([
      faker.helpers.arrayElement([[], null]),
      undefined,
    ]),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetCaptureStatusMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperCaptureSwitch
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperCaptureSwitch>
        | ResponseDataWrapperCaptureSwitch),
) => {
  return http.get('*/net_request/capture/status', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCaptureStatusResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getToggleCaptureMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.post('*/net_request/capture/toggle', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getToggleCaptureResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetCachedRequestsMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperRecordRequests
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperRecordRequests>
        | ResponseDataWrapperRecordRequests),
) => {
  return http.get('*/net_request/requests', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCachedRequestsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getNetRequestMock = () => [
  getGetCaptureStatusMockHandler(),
  getToggleCaptureMockHandler(),
  getGetCachedRequestsMockHandler(),
];
