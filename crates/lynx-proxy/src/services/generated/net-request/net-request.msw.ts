/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import { RecordingStatus, ResponseCode } from '../utoipaAxum.schemas';
import type {
  MessageEventRequest,
  MessageEventResponse,
  ResponseDataWrapperCaptureSwitch,
  ResponseDataWrapperRecordRequests,
  ResponseDataWrapperTupleUnit,
} from '../utoipaAxum.schemas';

export const getGetCaptureStatusResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperCaptureSwitch> = {},
): ResponseDataWrapperCaptureSwitch => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    recordingStatus: faker.helpers.arrayElement(Object.values(RecordingStatus)),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getToggleCaptureResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetCachedRequestsResponseMessageEventRequestMock = (
  overrideResponse: Partial<MessageEventRequest> = {},
): MessageEventRequest => ({
  ...{
    body: faker.string.alpha(20),
    headerSize: faker.number.int({ min: 0, max: undefined }),
    headers: {
      [faker.string.alphanumeric(5)]: faker.string.alpha(20),
    },
    method: faker.string.alpha(20),
    url: faker.string.alpha(20),
    version: faker.string.alpha(20),
  },
  ...overrideResponse,
});

export const getGetCachedRequestsResponseMessageEventResponseMock = (
  overrideResponse: Partial<MessageEventResponse> = {},
): MessageEventResponse => ({
  ...{
    body: faker.string.alpha(20),
    headerSize: faker.number.int({ min: 0, max: undefined }),
    headers: {
      [faker.string.alphanumeric(5)]: faker.string.alpha(20),
    },
    status: faker.number.int({ min: 0, max: undefined }),
    version: faker.string.alpha(20),
  },
  ...overrideResponse,
});

export const getGetCachedRequestsResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperRecordRequests> = {},
): ResponseDataWrapperRecordRequests => ({
  ...{
    code: 'ok',
    message: null,
    data: {
      newRequests: [
        {
          status: 'Completed',
          traceId: '9wmIjmv7DFCuoPeXgMyf0',
          isNew: true,
          request: {
            method: 'GET',
            url: 'http://www.baidu.com/a/1',
            headers: {
              host: 'www.baidu.com',
              'user-agent': 'curl/8.5.0',
              accept: '*/*',
              'proxy-connection': 'Keep-Alive',
            },
            version: 'HTTP/1.1',
            headerSize: 72,
            body: '',
          },
          response: {
            status: 200,
            headers: {
              'content-length': '509323',
              bdqid: '0xc741e28e0001b502',
              'set-cookie':
                'BAIDUID_BFESS=98A7E5CA6E6D98B4E785D775A40B4A2E:FG=1; Path=/; Domain=baidu.com; Max-Age=31536000; Secure; SameSite=None',
              'x-xss-protection': '1;mode=block',
              vary: 'Accept-Encoding',
              server: 'BWS/1.1',
              connection: 'keep-alive',
              bdpagetype: '1',
              'content-type': 'text/html; charset=utf-8',
              traceid: '1747399243243806337014358006186547197186',
              'x-ua-compatible': 'IE=Edge,chrome=1',
              date: 'Fri, 16 May 2025 12:40:43 GMT',
            },
            version: 'HTTP/1.1',
            headerSize: 974,
          },
          timings: {
            requestStart: 1747399243245,
            requestEnd: 1747399243269,
            requestBodyStart: null,
            requestBodyEnd: 1747399243245,
            proxyStart: 1747399243268,
            proxyEnd: 1747399243245,
            reponseBodyStart: 1747399243290,
            reponseBodyEnd: 1747399243290,
          },
        },
        {
          status: 'Completed',
          traceId: '9wmIjmv7DFCuoPeXgMyf0',
          isNew: true,
          request: {
            method: 'GET',
            url: 'http://www.baidu.com/a',
            headers: {
              host: 'www.baidu.com',
              'user-agent': 'curl/8.5.0',
              accept: '*/*',
              'proxy-connection': 'Keep-Alive',
            },
            version: 'HTTP/1.1',
            headerSize: 72,
            body: '',
          },
          response: {
            status: 200,
            headers: {
              'content-length': '509323',
              bdqid: '0xc741e28e0001b502',
              'set-cookie':
                'BAIDUID_BFESS=98A7E5CA6E6D98B4E785D775A40B4A2E:FG=1; Path=/; Domain=baidu.com; Max-Age=31536000; Secure; SameSite=None',
              'x-xss-protection': '1;mode=block',
              vary: 'Accept-Encoding',
              server: 'BWS/1.1',
              connection: 'keep-alive',
              bdpagetype: '1',
              'content-type': 'text/html; charset=utf-8',
              traceid: '1747399243243806337014358006186547197186',
              'x-ua-compatible': 'IE=Edge,chrome=1',
              date: 'Fri, 16 May 2025 12:40:43 GMT',
            },
            version: 'HTTP/1.1',
            headerSize: 974,
          },
          timings: {
            requestStart: 1747399243245,
            requestEnd: 1747399243269,
            requestBodyStart: null,
            requestBodyEnd: 1747399243245,
            proxyStart: 1747399243268,
            proxyEnd: 1747399243245,
            reponseBodyStart: 1747399243290,
            reponseBodyEnd: 1747399243290,
          },
        },
        {
          status: 'Completed',
          traceId: '9wmIjmv7DFCuoPeXgMyf0',
          isNew: true,
          request: {
            method: 'GET',
            url: 'http://www.baidu.com/',
            headers: {
              host: 'www.baidu.com',
              'user-agent': 'curl/8.5.0',
              accept: '*/*',
              'proxy-connection': 'Keep-Alive',
            },
            version: 'HTTP/1.1',
            headerSize: 72,
            body: '',
          },
          response: {
            status: 200,
            headers: {
              'content-length': '509323',
              bdqid: '0xc741e28e0001b502',
              'set-cookie':
                'BAIDUID_BFESS=98A7E5CA6E6D98B4E785D775A40B4A2E:FG=1; Path=/; Domain=baidu.com; Max-Age=31536000; Secure; SameSite=None',
              'x-xss-protection': '1;mode=block',
              vary: 'Accept-Encoding',
              server: 'BWS/1.1',
              connection: 'keep-alive',
              bdpagetype: '1',
              'content-type': 'text/html; charset=utf-8',
              traceid: '1747399243243806337014358006186547197186',
              'x-ua-compatible': 'IE=Edge,chrome=1',
              date: 'Fri, 16 May 2025 12:40:43 GMT',
            },
            version: 'HTTP/1.1',
            headerSize: 974,
          },
          timings: {
            requestStart: 1747399243245,
            requestEnd: 1747399243269,
            requestBodyStart: null,
            requestBodyEnd: 1747399243245,
            proxyStart: 1747399243268,
            proxyEnd: 1747399243245,
            reponseBodyStart: 1747399243290,
            reponseBodyEnd: 1747399243290,
          },
        },
        {
          status: 'Completed',
          traceId: 't_tZJzG6LlG9j2T9_DKTv',
          isNew: true,
          request: {
            method: 'CONNECT',
            url: '',
            headers: {
              host: '127.0.0.1:3001',
              'proxy-connection': 'close',
            },
            version: 'HTTP/1.1',
            headerSize: 39,
            body: '',
          },
          response: null,
          messages: null,
          timings: {
            requestStart: 1747442496140,
            requestEnd: 1747442496140,
            requestBodyStart: null,
            requestBodyEnd: 1747442496140,
            proxyStart: null,
            proxyEnd: null,
            reponseBodyStart: null,
            reponseBodyEnd: null,
          },
        },
        {
          status: 'Completed',
          traceId: 'hdZtDQjt0WIr1lhQyLr-I',
          isNew: true,
          request: {
            method: 'GET',
            url: 'http://127.0.0.1:3001/',
            headers: {
              'sec-websocket-version': '13',
              upgrade: 'websocket',
              'sec-websocket-extensions':
                'permessage-deflate; client_max_window_bits',
              'sec-websocket-key': 'MeByFGua8qD+2w88c5dMmQ==',
              connection: 'Upgrade',
              host: '127.0.0.1:3001',
            },
            version: 'HTTP/1.1',
            headerSize: 181,
            body: '',
          },
          response: null,
          messages: {
            status: 'Disconnected',
            message: [
              {
                direction: 'ServerToClient',
                timestamp: 1747442498157,
                message: {
                  text: '5bCx56uL5Yi75pW45pOa5bqr55qE5rWq6LK75pmC6ZaT6ICD5oWu5bCN5pa5',
                },
              },
              {
                direction: 'ClientToServer',
                timestamp: 1747442498158,
                message: {
                  text: '5bCx56uL5Yi75pW45pOa5bqr55qE5rWq6LK75pmC6ZaT6ICD5oWu5bCN5pa5',
                },
              },
              {
                direction: 'ServerToClient',
                timestamp: 1747442502203,
                message: {
                  close: null,
                },
              },
            ],
          },
          timings: {
            requestStart: 1747442496142,
            requestEnd: 1747442496144,
            requestBodyStart: null,
            requestBodyEnd: 1747442496142,
            proxyStart: null,
            proxyEnd: null,
            reponseBodyStart: null,
            reponseBodyEnd: null,
          },
        },
      ],
      patchRequests: null,
    },
  },
  ...overrideResponse,
});

export const getGetCaptureStatusMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperCaptureSwitch
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperCaptureSwitch>
        | ResponseDataWrapperCaptureSwitch),
) => {
  return http.get('*/net_request/capture/status', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCaptureStatusResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getToggleCaptureMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.post('*/net_request/capture/toggle', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getToggleCaptureResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetCachedRequestsMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperRecordRequests
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperRecordRequests>
        | ResponseDataWrapperRecordRequests),
) => {
  return http.get('*/net_request/requests', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCachedRequestsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getNetRequestMock = () => [
  getGetCaptureStatusMockHandler(),
  getToggleCaptureMockHandler(),
  getGetCachedRequestsMockHandler(),
];
