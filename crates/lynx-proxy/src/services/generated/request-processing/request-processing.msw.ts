/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import {
  CaptureType,
  HandlerType,
  LogicalOperator,
  ResponseCode,
} from '../utoipaAxum.schemas';
import type {
  ResponseDataWrapperRequestRule,
  ResponseDataWrapperRuleListResponse,
  ResponseDataWrapperTemplateHandlersResponse,
  ResponseDataWrapperTupleUnit,
} from '../utoipaAxum.schemas';

export const getListRulesResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperRuleListResponse> = {},
): ResponseDataWrapperRuleListResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    page: faker.number.int({ min: 0, max: undefined }),
    pageSize: faker.number.int({ min: 0, max: undefined }),
    rules: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      enabled: faker.datatype.boolean(),
      id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      name: faker.string.alpha(20),
      priority: faker.number.int({ min: undefined, max: undefined }),
    })),
    total: faker.number.int({ min: 0, max: undefined }),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRuleResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperRequestRule> = {},
): ResponseDataWrapperRequestRule => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    capture: {
      condition: faker.helpers.arrayElement([
        {
          ...{
            captureType: faker.helpers.arrayElement(Object.values(CaptureType)),
            config: {},
            host: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            method: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            pattern: faker.string.alpha(20),
          },
          ...{ type: faker.helpers.arrayElement(['simple'] as const) },
        },
        {
          ...{
            conditions: [],
            operator: faker.helpers.arrayElement(
              Object.values(LogicalOperator),
            ),
          },
          ...{ type: faker.helpers.arrayElement(['complex'] as const) },
        },
      ]),
      id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
    },
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined,
    ]),
    enabled: faker.datatype.boolean(),
    handlers: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      config: {},
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      enabled: faker.datatype.boolean(),
      executionOrder: faker.number.int({ min: undefined, max: undefined }),
      handlerType: faker.helpers.arrayElement(Object.values(HandlerType)),
      id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      name: faker.string.alpha(20),
    })),
    id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    name: faker.string.alpha(20),
    priority: faker.number.int({ min: undefined, max: undefined }),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteRuleResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getToggleRuleResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTemplateHandlersResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTemplateHandlersResponse> = {},
): ResponseDataWrapperTemplateHandlersResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    handlers: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      config: {},
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      enabled: faker.datatype.boolean(),
      executionOrder: faker.number.int({ min: undefined, max: undefined }),
      handlerType: faker.helpers.arrayElement(Object.values(HandlerType)),
      id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      name: faker.string.alpha(20),
    })),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListRulesMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperRuleListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperRuleListResponse>
        | ResponseDataWrapperRuleListResponse),
) => {
  return http.get('*/request_processing/rules', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListRulesResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetRuleMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperRequestRule
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperRequestRule>
        | ResponseDataWrapperRequestRule),
) => {
  return http.get('*/request_processing/rules/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetRuleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getDeleteRuleMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.delete('*/request_processing/rules/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteRuleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getToggleRuleMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.patch('*/request_processing/rules/:id/toggle', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getToggleRuleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetTemplateHandlersMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTemplateHandlersResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTemplateHandlersResponse>
        | ResponseDataWrapperTemplateHandlersResponse),
) => {
  return http.get('*/request_processing/templates/handlers', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTemplateHandlersResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getRequestProcessingMock = () => [
  getListRulesMockHandler(),
  getGetRuleMockHandler(),
  getDeleteRuleMockHandler(),
  getToggleRuleMockHandler(),
  getGetTemplateHandlersMockHandler(),
];
