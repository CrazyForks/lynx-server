/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import { ResponseCode } from '../utoipaAxum.schemas';
import type { ResponseDataWrapperString } from '../utoipaAxum.schemas';

export const getGetCertPathResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperString> = {},
): ResponseDataWrapperString => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: faker.string.alpha(20),
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDownloadCertificateMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get('*/certificate/download', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetCertPathMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperString
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ResponseDataWrapperString> | ResponseDataWrapperString),
) => {
  return http.get('*/certificate/path', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCertPathResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getCertificateMock = () => [
  getDownloadCertificateMockHandler(),
  getGetCertPathMockHandler(),
];
