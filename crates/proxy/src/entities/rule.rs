//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4
use async_trait::async_trait;
use chrono::Local;
use sea_orm::{entity::prelude::*, ActiveValue};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "rule")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub r#match: String,
    pub target_uri: String,
    pub rule_group_id: i32,
    pub created_at: u32,
    pub updated_at: u32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::rule_group::Entity",
        from = "Column::RuleGroupId",
        to = "super::rule_group::Column::Id"
    )]
    RuleGroup,
}

impl Related<super::rule_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RuleGroup.def()
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.created_at = ActiveValue::Set(Local::now().timestamp_millis() as u32);
        } else {
            self.updated_at = ActiveValue::Set(Local::now().timestamp_millis() as u32);
        }
        Ok(self)
    }
}
